{"version":3,"sources":["webpack:///./src/templates/tags.js","webpack:///./src/components/slugify.js","webpack:///./src/components/Blog/BlogCard.js","webpack:///./src/components/common/SplitLayout.js","webpack:///./src/components/Blog/Tags.js","webpack:///./src/hooks/useRandomBlogPost.js","webpack:///./src/components/Blog/BlogLayout.js"],"names":["TagsPage","data","tag","pageContext","allMarkdownRemark","edges","totalCount","tagHeader","title","map","node","slug","fields","frontmatter","date","tags","key","id","readtime","timeToRead","excerpt","module","exports","str","match","x","toLowerCase","join","PostWrapper","styled","article","p","theme","dark","accentColor","primaryColor","shadowSmall","secondaryColor","BlogDateAndReadTime","style","fontSize","color","aria-label","icon","BlogCard","to","marginTop","slugify","SplitLayoutWrapper","section","spacing","sectionBottom","props","media","fablet","SplitLayout","content","aside","className","TagBreadcrumb","Link","Tags","useStaticQuery","overflow","group","fieldValue","randomGenerator","min","max","Math","floor","random","useRandomBlogPost","blogposts","randomPost","window","location","pathname","randomSlug","randomTitle","BlogLayout","children","sharerSection"],"mappings":"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","file":"component---src-templates-tags-js-276b9333082b7cb41481.js","sourcesContent":["import React from 'react';\r\nimport { graphql } from 'gatsby';\r\n\r\nimport SEO from '@components/seo';\r\nimport Layout from '@components/Layout/Layout';\r\nimport BlogCard from '@components/Blog/BlogCard';\r\nimport BlogLayout from '@components/Blog/BlogLayout';\r\n\r\nconst TagsPage = ({ data, pageContext }) => {\r\n  const { tag } = pageContext;\r\n  const { edges, totalCount } = data.allMarkdownRemark;\r\n\r\n  const tagHeader = `${totalCount} post${\r\n    totalCount === 1 ? '' : 's'\r\n  } tagged with \"${tag}\"`;\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title={tagHeader + ' | Anurag Hazra'} />\r\n\r\n      <BlogLayout>\r\n        <h1>{tagHeader}</h1>\r\n        <br />\r\n        <br />\r\n        {edges.map(({ node }) => {\r\n          const { slug } = node.fields;\r\n          const { title, date, tags } = node.frontmatter;\r\n          return (\r\n            <BlogCard\r\n              tags={tags}\r\n              key={node.id}\r\n              slug={slug}\r\n              title={title}\r\n              date={date}\r\n              readtime={node.timeToRead}\r\n              excerpt={node.excerpt}\r\n            />\r\n          );\r\n        })}\r\n      </BlogLayout>\r\n    </Layout>\r\n  );\r\n};\r\nexport default TagsPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    allMarkdownRemark(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          id\r\n          excerpt\r\n          timeToRead\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            tags\r\n            title\r\n            date(formatString: \"MMMM DD, YYYY\", locale: \"en\")\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","const slugify = str =>\r\n  str &&\r\n  str\r\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\r\n    .map(x => x.toLowerCase())\r\n    .join('-');\r\n\r\nmodule.exports = slugify;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Link from 'gatsby-link';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { TagBreadcrumb } from './Tags';\r\nimport slugify from '@components/slugify';\r\n\r\nconst PostWrapper = styled.article`\r\n  overflow: auto;\r\n  margin-bottom: 70px;\r\n  /* margin-top: 100px; */\r\n  padding: 30px 30px;\r\n  border-top: 5px solid\r\n    ${p => (p.theme.dark ? p.theme.accentColor : p.theme.primaryColor)};\r\n  border-radius: 10px;\r\n  box-shadow: ${p => p.theme.shadowSmall};\r\n  background-color: ${p => p.theme.secondaryColor};\r\n\r\n  &:hover {\r\n    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  span {\r\n    font-size: 13px;\r\n    color: gray;\r\n  }\r\n`;\r\n\r\nexport const BlogDateAndReadTime = ({ date, readtime }) => (\r\n  <span style={{ fontSize: 13, color: 'gray' }}>\r\n    <span aria-label={`publish date ${date}`}>\r\n      <FontAwesomeIcon color=\"gray\" icon=\"calendar-alt\" />\r\n      &nbsp;&nbsp;{date}\r\n    </span>\r\n    &nbsp;&nbsp;&nbsp;\r\n    <span aria-label={`${readtime} minutes read`}>\r\n      <FontAwesomeIcon color=\"gray\" icon=\"clock\" />\r\n      &nbsp;&nbsp;{readtime}min read\r\n    </span>\r\n  </span>\r\n);\r\n\r\nconst BlogCard = ({ date, readtime, title, excerpt, slug, tags }) => {\r\n  return (\r\n    <Link to={slug} aria-label={`${title} - read time ${readtime} minutes`}>\r\n      <PostWrapper>\r\n        <BlogDateAndReadTime date={date} readtime={readtime} />\r\n\r\n        <h2>{title}</h2>\r\n        <p>{excerpt}</p>\r\n\r\n        <div style={{ marginTop: 20 }}>\r\n          {tags.map(tag => (\r\n            <TagBreadcrumb\r\n              key={tag}\r\n              aria-label={`${tag} tag`}\r\n              to={`/blog/tags/${slugify(tag)}/`}\r\n            >\r\n              {tag}\r\n            </TagBreadcrumb>\r\n          ))}\r\n        </div>\r\n      </PostWrapper>\r\n    </Link>\r\n  );\r\n};\r\n\r\nBlogDateAndReadTime.propTypes = {\r\n  date: PropTypes.string.isRequired,\r\n  readtime: PropTypes.number.isRequired,\r\n};\r\n\r\nBlogCard.propTypes = {\r\n  date: PropTypes.string.isRequired,\r\n  readtime: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  excerpt: PropTypes.string.isRequired,\r\n  slug: PropTypes.string.isRequired,\r\n  tags: PropTypes.array.isRequired,\r\n};\r\nexport default BlogCard;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst SplitLayoutWrapper = styled.section`\r\n  ${p => p.theme.spacing.sectionBottom};\r\n\r\n  & article:first-of-type {\r\n    margin-top: 15px;\r\n  }\r\n\r\n  display: grid;\r\n  grid-template-columns: minmax(750px, 1fr) 1fr;\r\n  grid-column-gap: 30px;\r\n  grid-template-areas: 'post side';\r\n\r\n  .layout__content {\r\n    grid-area: post;\r\n  }\r\n  .layout__aside {\r\n    grid-area: side;\r\n  }\r\n\r\n  @media ${props => props.theme.media.fablet} {\r\n    /* setting g-t-c to 1fr 1fr because in mobile \r\n    version minmax was breaking the layout */\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-column-gap: 0px;\r\n    grid-row-gap: 30px;\r\n    grid-template-areas:\r\n      'post post'\r\n      'side side';\r\n  }\r\n\r\n  .sticky__aside {\r\n    position: sticky;\r\n    top: 100px;\r\n  }\r\n`;\r\n\r\nconst SplitLayout = ({ content, aside }) => (\r\n  <SplitLayoutWrapper>\r\n    <section className=\"layout__content\">{content && content}</section>\r\n    <section className=\"layout__aside\">\r\n      <aside className=\"sticky__aside\">{aside && aside}</aside>\r\n    </section>\r\n  </SplitLayoutWrapper>\r\n);\r\n\r\nSplitLayout.propTypes = {\r\n  content: PropTypes.node.isRequired,\r\n  aside: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default SplitLayout;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link, graphql, useStaticQuery } from 'gatsby';\r\nimport slugify from '@components/slugify';\r\n\r\nexport const useTags = () => {\r\n  const tags = useStaticQuery(graphql`\r\n    query {\r\n      allMarkdownRemark(limit: 2000) {\r\n        group(field: frontmatter___tags) {\r\n          fieldValue\r\n          totalCount\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  return tags;\r\n};\r\n\r\nexport const TagBreadcrumb = styled(Link)`\r\n  float: left;\r\n  border: 1px solid ${p => (p.theme.dark ? p.theme.primaryColor : '#d9e0ff')};\r\n  border-radius: 50px;\r\n  padding: 8px 13px;\r\n  line-height: 10px;\r\n  margin: 5px;\r\n  font-size: 12px;\r\n\r\n  &:hover {\r\n    background: ${p => (p.theme.dark ? p.theme.primaryColor : '#d9e0ff')};\r\n    color: ${p => (p.theme.dark ? '#d9e0ff' : '#6D83F2')};\r\n  }\r\n`;\r\n\r\nconst Tags = () => {\r\n  const tags = useTags();\r\n\r\n  return (\r\n    <section style={{ overflow: 'auto' }}>\r\n      {tags.allMarkdownRemark.group.map(tag => (\r\n        <TagBreadcrumb\r\n          key={tag.fieldValue}\r\n          to={`/blog/tags/${slugify(tag.fieldValue)}/`}\r\n          aria-label={`${tag.totalCount} posts tagged with ${tag.fieldValue}`}\r\n        >\r\n          {tag.fieldValue}, {tag.totalCount}\r\n        </TagBreadcrumb>\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Tags;\r\n","import { useStaticQuery, graphql } from 'gatsby';\r\n\r\nexport const randomGenerator = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\nconst useRandomBlogPost = () => {\r\n  const blogposts = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        allMarkdownRemark(filter: { fields: { posttype: { eq: \"blog\" } } }) {\r\n          edges {\r\n            node {\r\n              frontmatter {\r\n                title\r\n              }\r\n              fields {\r\n                slug\r\n              }\r\n            }\r\n          }\r\n          totalCount\r\n        }\r\n      }\r\n    `\r\n  );\r\n\r\n  let randomPost =\r\n    blogposts.allMarkdownRemark.edges[\r\n      randomGenerator(0, blogposts.allMarkdownRemark.totalCount - 1)\r\n    ];\r\n\r\n  // make sure we don't have redundant randomPost\r\n  if (typeof window !== 'undefined') {\r\n    while (randomPost.node.fields.slug === window.location.pathname) {\r\n      randomPost =\r\n        blogposts.allMarkdownRemark.edges[\r\n          randomGenerator(0, blogposts.allMarkdownRemark.totalCount - 1)\r\n        ];\r\n      // don't wanna run it second time\r\n      break;\r\n    }\r\n  }\r\n\r\n  return {\r\n    randomSlug: randomPost.node.fields.slug,\r\n    randomTitle: randomPost.node.frontmatter.title,\r\n  };\r\n};\r\nexport default useRandomBlogPost;\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport Link from 'gatsby-link';\r\n\r\nimport Tags from '@components/Blog/Tags';\r\nimport SplitLayout from '@common/SplitLayout';\r\nimport useRandomBlogPost from '@src/hooks/useRandomBlogPost';\r\n\r\nconst BlogLayout = ({ children, sharerSection }) => {\r\n  const { randomSlug, randomTitle } = useRandomBlogPost();\r\n\r\n  return (\r\n    <SplitLayout\r\n      content={children}\r\n      aside={\r\n        <>\r\n          <section>\r\n            <h4>Random post</h4>\r\n            <Link style={{ fontSize: '16px' }} to={randomSlug}>\r\n              {randomTitle}\r\n            </Link>\r\n            <br />\r\n            <br />\r\n          </section>\r\n          <section>\r\n            <h4>Tags</h4>\r\n            <Tags />\r\n            <br />\r\n          </section>\r\n          {sharerSection && sharerSection}\r\n        </>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nBlogLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  sharerSection: PropTypes.node,\r\n};\r\n\r\nexport default BlogLayout;\r\n"],"sourceRoot":""}