{"componentChunkName":"component---src-templates-case-study-js","path":"/case-studies/","result":{"data":{"markdownRemark":{"id":"0fd606b5-a052-5154-98f4-3481d5f762b1","html":"<!-- ---\ntitle: GyroDodge\nexcerpt: Dodge! Shoot! Win! GyroDodge is a simple gyroscopic mobile game. I used device orientation API to get the alpha, gamma, delta rotations of the mobile device and then use it to control the player. also available on itch.io\n\n# iframe: //www.youtube.com/embed/GdRlkHTMk9c/?modestbranding=1&showinfo=0&autohide=1&rel=0\n# demo: //anuraghazra.github.io/GyroDodge/\nsrc: //github.com/anuraghazra/GyroDodge\n\ninfo:\n  idea: Gyrododge was an experimental game for testing out the Javascript's Gyroscope API. It turns out that we can do pretty much anything with it. So i made a game with it.\n  tech: [Javascript, HTML5 Canvas, GyroscopeAPI]\n---\n\n## How it Works?\n\nGyroDodge makes use of javascript's [Device Orientation API](https://developer.mozilla.org/en-US/docs/Web/API/Detecting_device_orientation) to move the small white dot around your mobile screen & you can shoot projectiles at the direction you are heading toward by tapping on your screen. also also used [p5js](https://p5js.org/) in gyrododge for making my life bit more easier\n\nhere's the code to get the device orientation of the device\n\n```js\n// check if browser supports DeviceOrientationEvent event\nif (!window.DeviceOrientationEvent) {\n  alert(\"Sorry, your browser doesn't support Device Orientation\")\n} else {\n  window.addEventListener(\"deviceorientation\", e => {\n    let alpha = event.alpha\n    let beta = event.beta\n    let gamma = event.gamma\n  })\n}\n```\n\nto move the player in the desired location with these parameters, I add them to the player's `acceleration` by using p5.js's `Vector` class\n\n> [check out the code](https://github.com/anuraghazra/gyrododge/blob/master/js/Player.js#L44)\n\n```js\nwindow.addEventListener(\"deviceorientation\", e => {\n  this.tiltLR = e.gamma\n  this.tiltFB = e.beta\n  let gyro = createVector(this.tiltLR, this.tiltFB)\n  // add the force\n  this.applyForce(gyro)\n})\n```\n\n## How I created those asteroids?\n\nTo create those polygonal asteroids, I created a `Rock.js` class, which updates, renders, and generates them.\n\n```js\nclass Rock {\n  constructor(x, y, radius) {\n    this.pos = createVector(x || random(width), y || random(height))\n    this.vel = p5.Vector.random2D()\n    this.radius = radius || random(15, 30)\n    this.vertices = []\n    this.offsets = []\n    this.total = random(5, 15)\n\n    for (let i = 0; i < this.total; i++) {\n      this.offsets[i] = random(-5, 5)\n    }\n    for (let i = 0; i < this.total; i++) {\n      let angle = map(i, 0, this.total, 0, TWO_PI)\n      let r = this.radius + this.offsets[i]\n      let x = r * cos(angle)\n      let y = r * sin(angle)\n      this.vertices.push({ x, y })\n    }\n  }\n}\n```\n\nIn the update method, I added the `velocity` to the `position` at each frame. I also checked for collision with the boundaries. If the rock hits the wall, then it just bounces back off them.\n\n```js\nupdate() {\n  this.pos.add(this.vel);\n\n  if (this.pos.x > (width + this.radius) || this.pos.x < this.radius) {\n    this.vel.x *= -1;\n  }\n  if (this.pos.y > (height + this.radius) || this.pos.y < this.radius) {\n    this.vel.y *= -1;\n  }\n}\n```\n\nIn render function, I just used p5js's `vertex` method to draw the polygonal shape\n\n```js\nrender() {\n  noFill();\n  stroke(255);\n  beginShape();\n  for (const v of this.vertices) {\n    vertex(this.pos.x + v.x, this.pos.y + v.y);\n  }\n  endShape(CLOSE);\n}\n```\n\nIn gyrodoge I also have a game mechanism where if you hit an asteroid it can break into multiple asteroids, here's how it works\n\n```js\nbreakup() {\n  let newA = [];\n  newA[0] = new Rock(this.pos.x, this.pos.y, this.radius * 0.8);\n  newA[1] = new Rock(this.pos.x, this.pos.y, this.radius * 0.8);\n  return newA;\n}\n```\n\nAnd that's it, for the Rock.js class.\n\n## Particles Class\n\nI also added Particles class which emits particles in a random direction, and it extends the [Bullet](https://github.com/anuraghazra/GyroDodge/blob/master/js/Bullet.js) class\n\n```js\nclass Particle extends Bullet {\n  constructor(spos, angle) {\n    super(spos, angle)\n    this.vel = p5.Vector.random2D()\n    this.life = 1\n  }\n\n  render() {\n    this.vel.y += random(-0.2, 0.2)\n    push()\n    stroke(255, this.life * 255)\n    strokeWeight(2)\n    point(this.pos.x, this.pos.y)\n    pop()\n  }\n  die() {\n    this.life -= 0.03\n  }\n}\n```\n\n## Bullet Class\n\n> [check out the code](https://github.com/anuraghazra/GyroDodge/blob/master/js/Bullet.js)\n\nIn bullet class, there's not much going on just basic stuff\n\n```js\nclass Bullet {\n  constructor(spos, angle) {\n    this.pos = createVector(spos.x, spos.y)\n    this.vel = p5.Vector.fromAngle(angle)\n    this.vel.mult(10)\n    this.angle = angle\n  }\n\n  update() {\n    this.pos.add(this.vel);\n  }\n\n  render() {\n    ...\n  }\n\n  // checks for hits\n  hits(target) {\n    var d = dist(this.pos.x, this.pos.y, target.pos.x, target.pos.y)\n    if (d < target.radius) {\n      return true\n    }\n    return false\n  }\n\n  // if offscreen we will remove it from the bullet array\n  offscreen() {\n    if (this.pos.x > width || this.pos.x < 0) {\n      return true\n    }\n    if (this.pos.y > height || this.pos.y < 0) {\n      return true\n    }\n    return false\n  }\n}\n```\n\n## Player Class\n\n> [check out the code](https://github.com/anuraghazra/GyroDodge/blob/master/js/Player.js)\n\nIn Player class we have some exciting stuff, let's see the constructor first\n\n```js\nclass Player {\n  constructor() {\n    this.pos = createVector(width / 2, height / 2);\n    this.acc = createVector(0, 0);\n    this.vel = createVector(0, 0);\n    this.radius = 8;\n\n    this.tiltLR = 0;\n    this.tiltFB = 0;\n\n    this.isUsingKeyboard = false; // is using desktop?\n\n    if (!window.DeviceOrientationEvent) {\n      alert(\"Sorry, your browser doesn't support Device Orientation\")\n    }\n\n    if (!('ontouchstart' in window)) {\n      this.isUsingKeyboard = true;\n      window.addEventListener('mousemove', (e) => {\n        let pos = p5.Vector.sub(this.pos, createVector(e.offsetX, e.offsetY))\n        this.applyForce(pos)\n      })\n    } else {\n      window.addEventListener('deviceorientation', (e) => {\n        this.tiltLR = e.gamma;\n        this.tiltFB = e.beta;\n        let gyro = createVector(this.tiltLR, this.tiltFB);\n        this.applyForce(gyro);\n      });\n    }\n  }\n```\n\nAs you can see, I initialized the `deviceorientation` events and player's position and velocity stuff. The most basic method of the Player class is `collidePointPoly` which detects if a point hits a polygon.\n\n```js\ncollidePointPoly(px, py, target, vertices) {\n  var collision = false;\n  // go through each of the vertices, plus the next vertex in the list\n  var next = 0;\n  for (var current = 0; current < vertices.length; current++) {\n    // get next vertex in list if we've hit the end, wrap around to 0\n    next = current + 1;\n    if (next == vertices.length) next = 0;\n    // get the PVectors at our current position this makes our if statement a little cleaner\n    var vc = vertices[current];\n    var vn = vertices[next];\n    let vcy = target.pos.y + vc.y;\n    let vny = target.pos.y + vn.y;\n    let vcx = target.pos.x + vc.x;\n    let vnx = target.pos.x + vn.x;\n    if (((vcy > py && vny < py) || (vcy < py && vny > py)) &&\n      (px < (vnx - vcx) * (py - vcy) / (vny - vcy) + vcx)) {\n      collision = !collision;\n    }\n  }\n  return collision;\n}\n```\n\nIt's the vital part of the class because it checks if the Player hits any Asteroids (rock), and depending on that, it determines if the game is over or not.\n\n## Game Class\n\n> [check out the code](https://github.com/anuraghazra/GyroDodge/blob/master/js/Game.js)\n\nGame class is just a state manager for the game, which holds all the variables and state management.\n\nwe also have [AssetMan](https://github.com/anuraghazra/GyroDodge/blob/master/js/AssetMan.js) class which preloads all the assets for the game (sound effects)\n\n## Setting Up\n\nAnd lastly but not least, we have [index.js](https://github.com/anuraghazra/GyroDodge/blob/master/js/index.js) where I wrote all the necessary game logic and initialization. -->","fields":{"slug":"/case-studies/"},"frontmatter":{"src":null,"title":"","info":null}}},"pageContext":{"slug":"/case-studies/"}},"staticQueryHashes":["1033876704"]}